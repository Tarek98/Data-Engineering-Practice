‚úÖ [Done] ‚ùå [Undone] üöß [Focus-Point]

* UW Course & Personal Learning: Pre July 2023:
    - Traditional performant langs like C & C++:
        - Come without some niceties in other popular languages like Java: static type checking & garbage collection.
        - Hard or impossible to reliably write code that is: fast, correct, and accurate.

    - Core Ideas: 
        - Enforce developer mistakes to be very difficult to make.
            - Why? Expecting devs not to make mistakes is unrealistic. 
            - What kind of mistakes? Memory allocation & concurrency issues.
            - How? Checking things at compile time that most languages don't check at all, and if so, only at runtime.

        - Incorporates many good ideas from C++ & improves upon them sometimes:
            - e.g. RAII: Resource Acquisition Is Initialization: 
                - A resource is encapsulated into a class: constructor usually acquires the resource & destructor always releases it.
                - ^It is used via a local instance of the class.
                - ^^ It is automatically freed when the object goes out of scope.
                - Guarantees that whatever happens while the resource is in use, it will eventually get freed.
            - e.g. Pointers/References.

        - Ownership: 
            - Rust's default memory management strategy.
            - At compile time, it is determined when allocated memory can be cleaned up.
            - Memory can be cleaned up when no one needs it anymore.
            - You can't mess up & leave a dangling reference around.
            - How it works:
                1. Every value has a variable that is its owner.
                2. There can only be one owner at a time.
                3. When the owner goes out of scope, the value is dropped.

    - Traits: 
        - A lot like interfaces in OOP.
        - You can use + to combine multiple traits.
        - 3 Important Traits To Start:
            - Iterator: allows us to iterate over a collection & more efficient than for loop construction.
            - Send: necessary for a variable to be transferred between threads & some standard types choose not to implement send trait to hint that we shouldn't use it for thread transfer.
            - Sync: thread-safe type: can be referenced from multiple threads concurrently BUT we can't have multiple mutable references.

    - Unsafe:
        - Dark and terrible magic.
        - Function/Block signature.
        - Use at your own risk, because you can get it wrong & if you do you get the problems Rust tries to avoid e.g. seg faults & memory leaks.
        - Not unlimited power, the borrow checker still does things & there are still rules.
        - Keep these small & ideally abstracted away behind an interface.
        - Inside an unsafe block/function, you can do the following things that are not normally allowed:
            1. Call an unsafe function/method.
            2. Access or modify a mutable static variable.
                - Rust tries hard to discourage devs from using global vars.
                - If you find yourself doing this, stop & think very carefully about why.
            3. Implement an unsafe trait.
                - In such cases, you must make sure what you're doing meets the requirements of the interface.
            4. Access the fields of a union.
                - A lot of people don't like using this & rightfully so.
                - Like a struct but its only one of the contents of the struct at a time & not all of them.
                - Why its unsafe: no way to be sure the union you're looking at is in fact the type you expect it to contain.
            5. Dereference a raw pointer.
                - Can use these when you need to write to a particular memory address, which sometimes happens for memory-mapped IO.
                - ^How to point to specific address: assign your address value to an integer and then cast it to a raw pointer (which is of type *const).
                - Might need this if calling into a C library or function; The rust package system ("crates") is growing all the time, but sometimes you'll have to interact with a library in C.

    - In Rust, the question mark operator is used as an error propagation alternative to functions that return Result or Option types1. 
    The ? operator is a shortcut as it reduces the amount of code needed to immediately return Err or None from the types Result<T, Err> or Option in a function.

* Comprehensive Rust book:
    https://google.github.io/comprehensive-rust/welcome.html

    - How non-blocking async IO works?
        - https://www.youtube.com/watch?v=wB9tIg209-8
        
        - For high-speed I/O devices such as file storage devices or network interfaces, 
        the hardware most likely will access entire blocks or packets of data to/from 
        some physical memory buffer before it triggers the interrupt.

        - Tokio async tasks (green threads) analogy to nodeJS async IO:
        Node allows your code to handle requests from hundreds of thousands open socket with 
        a single thread concurrently by multiplexing and sequencing all your js logic in a 
        single stream of execution. This works pretty well for webapp servers as most of the
        time is actually spent on waiting for network or disk (database / sockets) and the logic
        is not really CPU intensive - that is to say: this works well for IO-bound workloads.

    - Box:
        - Box is an owned pointer to data on the heap.
        - Guaranteed to be not null.
        - Recursive data types or data types with dynamic sizes need to use a Box.
        - Also useful when we want to transfer ownership of large data - to avoid copying large data on stack.
        - Box solves this problem as it has the same size as a regular pointer and just points at another element.
