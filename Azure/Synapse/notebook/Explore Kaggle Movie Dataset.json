{
	"name": "Explore Kaggle Movie Dataset",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkGymPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 3,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "3",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "8561ae71-4a5b-4de7-8620-466f28b5d5ed"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0297bde2-763f-452d-b2a2-75185fad29de/resourceGroups/TASynapseRG/providers/Microsoft.Synapse/workspaces/tasynapse1/bigDataPools/SparkGymPool",
				"name": "SparkGymPool",
				"type": "Spark",
				"endpoint": "https://tasynapse1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkGymPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 4,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.version"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.functions._\n",
					"import org.apache.spark.sql.types._"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Source: https://www.kaggle.com/datasets/ebiswas/imdb-review-dataset\n",
					"// From docs: JSON Lines (newline-delimited JSON) is supported by default. For JSON (one record per file), set the multiLine option to true.\n",
					"var movieDF = spark.read.format(\"json\").option(\"multiLine\",\"true\").load(\"abfss://tasynapsestoragefs@tasynapsestorage.dfs.core.windows.net/kaggleMovieReviews/\")"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF = movieDF.repartition(sc.defaultParallelism)\n",
					"movieDF.persist()"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.printSchema"
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.count()\n",
					"// Dataset contains around 5.6 million reviews as shown in kaggle homepage "
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.where($\"spoiler_tag\" === 1).count()\n",
					"// Dataset contains around 1.2 million spoiler reviews as shown in kaggle homepage "
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(movieDF.take(10))"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"val testMoviesList = movieDF.where($\"movie\".contains(\"Lost:\"))\n",
					"    .groupBy($\"movie\").count()\n",
					"    .where($\"count\" === 5)\n",
					"    .orderBy($\"movie\")\n",
					"    .limit(4)\n",
					"    .select($\"movie\")\n",
					"    .map(row => row.getString(0))\n",
					"    .collect()\n",
					"\n",
					"testMoviesList.map('\"' + _ +'\"')"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Task 1 Description:\n",
					"//   - Get reviewer names with the highest rating for each movie.\n",
					"//   - Test on a small subset of the data (5-10 movies).\n",
					"//   - Expand to full dataset."
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"// Task 1 Test:\n",
					"\n",
					"val testMoviesDf = movieDF.where($\"movie\".isin(testMoviesList:_*)).withColumn(\"rating\",$\"rating\".cast(IntegerType))\n",
					"\n",
					"val allRatings = testMoviesDf\n",
					"    .select(\"movie\", \"reviewer\", \"rating\")\n",
					"\n",
					"val maxRatings = testMoviesDf\n",
					"    .groupBy(col(\"movie\"))\n",
					"    .agg(max(col(\"rating\")).as(\"rating\"))\n",
					"\n",
					"val t1ResultDf = allRatings.join(maxRatings, Seq(\"movie\", \"rating\"), \"inner\")\n",
					"    .groupBy(col(\"movie\"),col(\"rating\").as(\"maxRating\"))\n",
					"    .agg(collect_list(col(\"reviewer\")).as(\"maxRatingReviewers\"))\n",
					"\n",
					"display(t1ResultDf)"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(testMoviesDf.sort($\"movie\".asc, $\"rating\".desc))"
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"// Task 1 Prod:\n",
					"\n",
					"val prodMoviesDf = movieDF.withColumn(\"rating\",$\"rating\".cast(IntegerType))\n",
					"\n",
					"val allRatings = prodMoviesDf\n",
					"    .select(\"movie\", \"reviewer\", \"rating\")\n",
					"\n",
					"val maxRatings = prodMoviesDf\n",
					"    .groupBy(col(\"movie\"))\n",
					"    .agg(max(col(\"rating\")).as(\"rating\"))\n",
					"\n",
					"val t1ResultDf = allRatings.join(maxRatings, Seq(\"movie\", \"rating\"), \"inner\")\n",
					"    .groupBy(col(\"movie\"),col(\"rating\").as(\"maxRating\"))\n",
					"    .agg(collect_list(col(\"reviewer\")).as(\"maxRatingReviewers\"))\n",
					"    .withColumn(\"countOfMaxRatingReviewers\", size($\"maxRatingReviewers\"))\n",
					"\n",
					"display(t1ResultDf.sort($\"countOfMaxRatingReviewers\".desc).limit(100))"
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Save Task 1 Output\n",
					"\n",
					"t1ResultDf.write.mode(\"overwrite\").json(\"abfss://tasynapsestoragefs@tasynapsestorage.dfs.core.windows.net/task1Result/\")"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}