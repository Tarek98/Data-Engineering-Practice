{
	"name": "Explore Kaggle Movie Dataset",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkGymPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 3,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "3",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "039e1fa9-6d77-45e8-9128-af847c2db580"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0297bde2-763f-452d-b2a2-75185fad29de/resourceGroups/TASynapseRG/providers/Microsoft.Synapse/workspaces/tasynapse1/bigDataPools/SparkGymPool",
				"name": "SparkGymPool",
				"type": "Spark",
				"endpoint": "https://tasynapse1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkGymPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 4,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.functions._\n",
					"import org.apache.spark.sql.types._"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Source: https://www.kaggle.com/datasets/ebiswas/imdb-review-dataset\n",
					"// From docs: JSON Lines (newline-delimited JSON) is supported by default. For JSON (one record per file), set the multiLine option to true.\n",
					"var movieDF = spark.read.format(\"json\").option(\"multiLine\",\"true\").load(\"abfss://tasynapsestoragefs@tasynapsestorage.dfs.core.windows.net/kaggleMovieReviews/\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF = movieDF.repartition(sc.defaultParallelism)\n",
					"movieDF.persist()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.printSchema"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.count()\n",
					"// Dataset contains around 5.6 million reviews as shown in kaggle homepage "
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"movieDF.where($\"spoiler_tag\" === 1).count()\n",
					"// Dataset contains around 1.2 million spoiler reviews as shown in kaggle homepage "
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(movieDF.take(10))"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"// Get reviewer names with the highest rating for each movie.\n",
					"//  - Test on a small subset of the data.\n",
					"//  - Expand to full dataset.\n",
					"\n",
					"val subset = movieDF.where($\"movie\".contains(\"Lost:\"))\n",
					"    .groupBy($\"movie\").count()\n",
					"    .where($\"count\" === 5)\n",
					"    .orderBy($\"movie\")\n",
					"    .limit(2)\n",
					"    .select($\"movie\")\n",
					"    .map(row => row.getString(0))\n",
					"    .collect()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"val taskOneDF = movieDF.where($\"movie\".isin(subset:_*))\n",
					"    .withColumn(\"ratingNum\", col(\"rating\").cast(IntegerType))\n",
					"    .groupBy($\"movie\")\n",
					"    .max(\"ratingNum\")\n",
					"\n",
					"display(taskOneDF)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// val taskOneDF = textFile.map(line => line.split(\",\"))\n",
					"//     .map(line => line.map(x => if (x == \"\") \"0\" else x))\n",
					"//     .map(line => (line(0), line.drop(1)))\n",
					"//     .map(t => (t._1, t._2.zipWithIndex, t._2.max))\n",
					"//     .map(t => (t._1, t._2.filter(rating => rating._1 == t._3).map(rating => rating._2.toInt + 1)))\n",
					"//     .map(t => t._1 + \",\" + t._2.mkString(\",\"))"
				],
				"execution_count": null
			}
		]
	}
}